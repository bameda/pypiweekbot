#!/usr/bin/env python3

import click, tweepy, hashlib, os, sys

import settings

@click.command()
@click.option('--access_token', envvar='TWITTER_ACCESS_TOKEN', default=settings.ACCESS_TOKEN,
              help="Twitter access token (env. TWITTER_ACCESS_TOKEN)")
@click.option('--access_secret', envvar='TWITTER_ACCESS_SECRET', default=settings.ACCESS_SECRET,
              help="Twitter access secret (env. TWITTER_ACCESS_SECRET)")
@click.option('--consumer_key', envvar='TWITTER_CONSUMER_KEY', default=settings.CONSUMER_KEY,
              help="Twitter consumer key (env. TWITTER_CONSUMER_KEY)")
@click.option('--consumer_secret', envvar='TWITTER_CONSUMER_SECRET', default=settings.CONSUMER_SECRET,
              help="Twitter consumer secret (env. TWITTER_CONSUMER_SECRET)")
@click.option('--user_blacklist', envvar='TWITTER_USER_BLACKLIST', default=settings.USER_BLACKLIST, multiple=True,
              help="Users blacklist [multi] (env. TWITTER_USER_BLACKLIST)")
@click.option('--word_blacklist', envvar='TWITTER_WORD_BLACKLIST', default=settings.WORD_BLACKLIST, multiple=True,
              help="Words blacklist [multi] (env. TWITTER_WORD_BLACKLIST)")
@click.option('--search_query', envvar='TWITTER_SEARCH_QUERY', default=settings.SEARCH_QUERY,
              help="Search query (env. TWITTER_SEARCH_QUERY)")
def cli(access_token, access_secret, consumer_key, consumer_secret,
        user_blacklist, word_blacklist, search_query):
    """I'm a Twitter bot and I know how to do retweets.

    Make no mistake, I have my little heart too ;-)
    """
    # build savepoint path + file
    hashed_hashtag = hashlib.md5(bytes(search_query, "utf8")).hexdigest()
    last_id_filename = 'last_id_hashtag_{}'.format(hashed_hashtag)
    rt_bot_path = os.path.dirname(os.path.abspath(__file__))
    last_id_file = os.path.join(rt_bot_path, last_id_filename)

    # create bot
    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
    auth.set_access_token(access_token, access_secret)
    api = tweepy.API(auth)

    try:
        api.verify_credentials()
    except tweepy.error.TweepError:
        sys.exit('Error: Invalid credentials.\n'
                 '       Use config file, env vars or command options.\n'
                 '       Check if consumer_key, consumer_secret, access_token and access_secret are valid.')


    # retrieve last savepoint if available
    try:
        with open(last_id_file, 'r') as file:
            savepoint = file.read()
    except IOError:
        savepoint = ''
        click.echo('No savepoint found. Trying to get as many results as possible.', err=True)

    # search query
    timeline_iterator = tweepy.Cursor(api.search,
                                      q=search_query,
                                      since_id=savepoint).items()

    # put everything into a list to be able to sort/filter
    timeline = list(timeline_iterator)

    try:
        last_tweet_id = timeline[0].id
    except IndexError:
        last_tweet_id = savepoint

    # filter @replies/blacklisted words & users out and reverse timeline
    timeline = filter(lambda status: status.text[0] != '@', timeline)
    timeline = filter(lambda status: not any(word in status.text.split() for word in word_blacklist), timeline)
    timeline = filter(lambda status: status.author.screen_name not in user_blacklist, timeline)
    timeline = reversed(list(timeline))

    # iterate the timeline and retweet
    tw_counter = 0
    err_counter = 0
    for status in timeline:
        try:
            click.echo('[{date}] - {name}: {message}'.format(date=status.created_at,
                                                        name=status.author.screen_name,
                                                        message=status.text))

            api.retweet(status.id)
            tw_counter += 1
        except tweepy.error.TweepError as e:
            # just in case tweet got deleted in the meantime or already retweeted
            err_counter += 1
            continue

    click.echo('Finished. {} Tweets retweeted, {} errors occured.'.format(tw_counter, err_counter))

    # write last retweeted tweet id to file
    with open(last_id_file, 'w') as file:
        file.write(str(last_tweet_id))


if __name__ == '__main__':
    cli()
